Macros and structures

Handled keys
	As of version 3.0.1, the following keys are supported:
		-Every key which unicode value is not a control character;
		-SDLK_BACKSPACE;
		-SDLK_DELETE;
		-SDLK_RETURN;
		-SDLK_ESCAPE;
		-SDLK_LEFT;
		-SDLK_RIGHT;
		-SDLK_HOME;
		-SDLK_END;
		-SDLK_INSERT;

	Note: Use SDL_Input_IsHandled() function to test whether a specific keypress
		is handled or not.

SDL_INPUT_VERSION
	From version 3.0.0, SDL_INPUT_VERSION() macro stores major, minor and
		patchlevel in a SDL_Version pointer passed as parameter.
	In version 2.0.0, the macro SDL_INPUT_VERSION returns the library's version
		as MAJOR_MINOR_PATCH ( 2_0_0 ).
	In version 1.03, the macro SDL_INPUT_VERSION returns the library's version
		as a floating point number ( 1.03 ).

SDL_INPUT_CAPS
	Intended for internal use only

SDL_INPUT_IS_PRINT( SDL_Event )
	Used to determine if a certain event may be stored in SDL_Input->string or not.
	Note: Unicode *MUST* be enabled in order for this to work. Sending an event
		catched before Unicode was enabled will result in an undefined behaviour.

SDL_INPUT_INSERT_MODE
	Enumeration used in handling input's insertion mode.
		SDL_INPUT_INS_MOD_QUERY		---	Queries actual insertion mode;
		SDL_INPUT_INS_MOD_INSERT	--- Sets insertion mode to insert;
		SDL_INPUT_INS_MOD_CRUSH		--- Sets insertion mode to crush;
		SDL_INPUT_INS_MOD_TOGGLE	--- Toggles insertion mode ( insert to crush
											and vice-versa);

SDL_Input
	Main SDL_Input library's structure.

typedef struct {
    unsigned char	*string;		/*Read-only*/
	long			cursorIndex,	/*Read-only*/
					maxChars;		/*Read-only*/
	SDL_Event		lastEvent;
} SDL_Input;

	string		--- Pointer to unsigned char array where input string is stored;
	cursorIndex	--- Cursor's current index (such that DELETE key would delete
						character SDL_Input->string[ SDL_Input->cursorIndex ]
						if any);
	maxChars	--- Maximum number of printable characters SDL_Input->string may
						hold, so that sizeof( SDL_Input->string ) ==
							maxChars + 1;
	lastEvent	--- Last event pulled out of the queue by SDL_Input (copy);

------------------
SDL_Input_Create()

Name
	SDL_Input_Create -- Allocates a SDL_Input structure

Synopsis
	#include "SDL_Input.h"
	SDL_Input* SDL_Input_Create( long maxChars );

Description
	This function allocates a SDL_Input structure such that field "string" may
		contain up to maxChars printable characters.
		Thus, the expression:
			(long)strlen( SDL_Input->string ) == maxChars
		may evaluates to 1 (true).

Return Value
	A pointer to the allocated SDL_Input structure or NULL if it fails.

Undefined Behaviour
	The behaviour is undefined if one of the following occurs:
		maxChars is lesser than 1;

Possible Failure Reasons
	-Internal malloc() failed.

See also
	Definitions, SDL_Input_Free

-----------------------
SDL_Input_EmptyString()

Name
	SDL_Input_EmptyString -- Resets string

Synopsis
	#include "SDL_Input.h"
	void SDL_Input_EmptyString( SDL_Input *input );

Description
	Sets all bytes of input->string to '\0'.

Return Value
	None

Undefined Behaviour
	The behaviour is undefined if one of the following occurs:
		-No particular UB;

Possible Failure Reasons
	None

See also
	SDL_Input_SetText

--------------
SDL_Input_Free

Name
	SDL_Input_Free -- Frees an allocated SDL_Input structure

Synopsis
	#include "SDL_Input.h"
	void SDL_Input_Free( SDL_Input* input );

Description
	This function frees input->string and set it to NULL.
	Then, it frees input and set it to NULL.

Undefined Behaviour
	The behaviour is undefined if one of the following occurs:
		-Pointer passed evaluates to something else than NULL or result of
			function SDL_Input_Create();

See also
	SDL_Input_Create, Definitions

-----------------------
SDL_Input_InputString()

Name
	SDL_Input_InputString -- Handles user input

Synopsis
	#include "SDL_Input.h"
	int SDL_Input_InputString( SDL_Input *input, SDL_Event *p_event,
		int *p_b_destRefresh, int *p_b_exit );

Description
	This function handles user's input. Calling this function is almost required
		(can't think of any way SDL_Input could be useful if this function isn't
		called).
	This function (along with the whole SDL_Input library), relies on events'
		unicode values. Shall p_event evaluate to NULL, this function will
		call SDL_EnableUNICODE() if not already enabled. Otherwise, it'll exit
		and return error state.
	This function makes internal use of SDL_Input_InsertMode() (see the latter's
		doc page for more infos).
	No matter the value of p_event, input->lastEvent holds a copy of the last
		event SDL_Input popped out of the queue.

	Parameters
		input			-- Pointer to SDL_Input (this *MUST* be the result of a
							previous call to SDL_Input_Create());
		p_event			-- Pointer to SDL_Event. Shall p_event evaluates to
							NULL, SDL_Input_InputString() will keep looping
							until SDLK_RETURN is hit. Otherwise, function just
							handles *p_event event and return control to caller;
		p_b_destRefresh	-- Pointer to int. After the call, *p_b_destRefresh will
							evaluate to 1 if string changed or to 0 otherwise.
							This parameter may evaluate to NULL without any
							problem;
		p_b_exit		-- Pointer to int. Shall p_b_exit not be NULL, *p_b_exit
							will equal 1 if SDLK_RETURN was pressed or 0
							otherwise.

Return Value
	Returns 0 on succes or -1 if an error is encountered.

Undefined Behaviour
	Shall one of the following occur, the behaviour is undefined:
		-input evaluates to something else than a valid SDL_Input structure
			pointer;

Possible Failure Reasons
	TO BE COMPLETED

See also
	SDL_Input_Create, SDL_Input_IsHandled, SDL_Input_InsertMode

----------------------
SDL_Input_InsertMode()

Name
	SDL_Input_InsertMode -- Toggles insert and crush mode

Synopsis
	#include "SDL_Input.h"
	SDL_INPUT_INSERT_MODE SDL_Input_InsertMode( SDL_INPUT_INSERT_MODE insMode );

Description
	This function accepts the following values as parameters:
		-SDL_INPUT_INS_MOD_INSERT: Explicitly sets insert mode to 'insert';
		-SDL_INPUT_INS_MOD_CRUSH:  Explicitly sets insert mode to 'crush';
		-SDL_INPUT_INS_MOD_TOGGLE: Toggles actual insert mode (crush to insert
			and vice-versa);
		-SDL_INPUT_INS_MOD_QUERY:  Simply returns actual insert mode;

Return Value
	Returns actual insert mode.

Undefined Behaviour

Possible Failure Reasons

See also
	Definitions (SDL_INPUT_INSERT_MODE)

---------------------
SDL_Input_IsHandled()

Name
	SDL_Input_IsHandled -- Checks whether given event is handled by SDL_Input

Synopsis
	#include "SDL_Input.h"
	int SDL_Input_IsHandled( SDL_Event event );

Description
	This function checks whether event is handled by the SDL_Input library.
	unicode *MUST* have been enabled before event was catched for this function
		to work properly!

Return Value
	1 if event is handleable or 0 otherwise.

Undefined Behaviour
	The behaviour is undefined if one of the following occurs:
		-unicode was enabled but after event was catched

Possible Failure Reasons
	None

See also
	Definitions( SDL_INPUT_IS_PRINT )

--------------------------
SDL_Input_SetCursorIndex()

Name
	SDL_Input_SetCursorIndex -- Sets cursor index

Synopsis
	#include "SDL_Input.h"
	int SDL_Input_SetCursorIndex( SDL_Input *input, long cursorIndex );

Description
	If cursorIndex is greater than -1 and lesser or equal to input->maxChars,
		input->cursorIndex is affected cursorIndex value.

Return Value
	-1 if cursorIndex is invalid (see Description above) or 0 otherwise.

Undefined Behaviour

Possible Failure Reasons

See also
	SDL_Input_SetText

-------------------
SDL_Input_SetText()

Name
	SDL_Input_SetText() -- Sets string

Synopsis
	#include "SDL_Input.h"
	void SDL_Input_SetText( SDL_Input *input, const char *str );

Description
	Overwrites input->string content with str one. At max input->maxChars are
		copied into input->string. Shall input->cursorIndex be greater than new
		string length, the former will be replaced to the end of the string.
		Otherwise, input->cursorIndex remains unchanged.

Return Value
	None

Undefined Behaviour

Possible Failure Reasons

See also
	SDL_Input_EmptyString, SDL_Input_SetCursorIndex